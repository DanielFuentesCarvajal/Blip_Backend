"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("./config");
const index_1 = require("./index");
describe('Config', () => {
    beforeEach(() => {
        config_1.TsJestMocker.setConfig(undefined);
    });
    it('should use global config', () => __awaiter(void 0, void 0, void 0, function* () {
        // GIVEN
        config_1.TsJestMocker.setConfig({
            failIfMockNotProvided: true,
            excludeMethodNames: ['method2'],
        });
        const testMock = (0, index_1.mock)();
        // WHEN
        const call = () => testMock.method2();
        // THEN
        expect(call).toThrow('testMock.method2 is not a function');
    }));
    it('should use default config values even if global config is defined', () => __awaiter(void 0, void 0, void 0, function* () {
        // GIVEN
        config_1.TsJestMocker.setConfig({
            failIfMockNotProvided: true,
            excludeMethodNames: ['method2'],
        });
        const testMock = (0, index_1.mock)();
        // WHEN
        const call = () => testMock.then();
        // THEN
        expect(call).toThrow('testMock.then is not a function');
    }));
    it('should override default config with global config', () => __awaiter(void 0, void 0, void 0, function* () {
        // GIVEN
        config_1.TsJestMocker.setConfig({
            failIfMockNotProvided: true,
            includeMethodNames: ['then'],
        });
        const testMock = (0, index_1.mock)();
        testMock.then.mockReturnValue(15);
        // WHEN
        const call = () => testMock.then(); // default config says to ignore 'then', but global config includes it
        // THEN
        expect(call).not.toThrow();
        expect(testMock.then).toHaveReturnedWith(15);
    }));
    it('should use local config over global config', () => __awaiter(void 0, void 0, void 0, function* () {
        // GIVEN
        config_1.TsJestMocker.setConfig({
            failIfMockNotProvided: true,
            includeMethodNames: ['then'],
        });
        const testMock = (0, index_1.mock)({
            excludeMethodNames: ['then4'],
        });
        testMock.then.mockReturnValue(15);
        // WHEN
        const call = () => testMock.then();
        // THEN
        expect(call).not.toThrow();
        expect(testMock.then).toHaveReturnedWith(15);
    }));
    describe('isTsJestMockerConfig', () => {
        it('should recognize config', () => __awaiter(void 0, void 0, void 0, function* () {
            // GIVEN
            const config = {
                failIfMockNotProvided: true,
            };
            // WHEN
            const isConfig = config_1.TsJestMocker.isTsJestMockerConfig(config);
            // THEN
            expect(isConfig).toBeTruthy();
        }));
        it('should recognize empty object is not a config', () => __awaiter(void 0, void 0, void 0, function* () {
            // GIVEN
            const config = {};
            // WHEN
            const isConfig = config_1.TsJestMocker.isTsJestMockerConfig(config);
            // THEN
            expect(isConfig).toBeFalsy();
        }));
        it('should recognize random property object is not a config', () => __awaiter(void 0, void 0, void 0, function* () {
            // GIVEN
            const config = {
                randomProperty: '123',
            };
            // WHEN
            const isConfig = config_1.TsJestMocker.isTsJestMockerConfig(config);
            // THEN
            expect(isConfig).toBeFalsy();
        }));
    });
});
