"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TsJestMocker = exports.MergedConfig = void 0;
var MergedConfig;
(function (MergedConfig) {
    /**
     * Merges local or global config with default values.
     */
    function merge(defaultConfig, localConfig) {
        var _a, _b, _c, _d, _e, _f;
        const globalConfig = TsJestMocker.getConfig();
        const excludeMethodNames = [
            ...defaultConfig.excludeMethodNames,
            ...((_b = (_a = localConfig === null || localConfig === void 0 ? void 0 : localConfig.excludeMethodNames) !== null && _a !== void 0 ? _a : globalConfig === null || globalConfig === void 0 ? void 0 : globalConfig.excludeMethodNames) !== null && _b !== void 0 ? _b : []),
        ];
        const includeMethodNames = [
            ...defaultConfig.includeMethodNames,
            ...((_d = (_c = localConfig === null || localConfig === void 0 ? void 0 : localConfig.includeMethodNames) !== null && _c !== void 0 ? _c : globalConfig === null || globalConfig === void 0 ? void 0 : globalConfig.includeMethodNames) !== null && _d !== void 0 ? _d : []),
        ];
        return {
            excludeMethodNames: new Set(excludeMethodNames),
            includeMethodNames: new Set(includeMethodNames),
            failIfMockNotProvided: (_f = (_e = localConfig === null || localConfig === void 0 ? void 0 : localConfig.failIfMockNotProvided) !== null && _e !== void 0 ? _e : globalConfig === null || globalConfig === void 0 ? void 0 : globalConfig.failIfMockNotProvided) !== null && _f !== void 0 ? _f : defaultConfig.failIfMockNotProvided,
        };
    }
    MergedConfig.merge = merge;
})(MergedConfig = exports.MergedConfig || (exports.MergedConfig = {}));
var TsJestMocker;
(function (TsJestMocker) {
    /**
     * Sets global {@link MockConfig}.
     *
     * @param config The TS Jest Mocker configuration that will be used for all mocks by default.
     */
    function setConfig(config) {
        global.tsJestMockerConfig = config;
    }
    TsJestMocker.setConfig = setConfig;
    /**
     * Gets global {@link MockConfig}.
     */
    function getConfig() {
        return global.tsJestMockerConfig;
    }
    TsJestMocker.getConfig = getConfig;
    /**
     * Type Guard to check whether specified Object is {@link MockConfig}.
     */
    function isTsJestMockerConfig(obj) {
        if (!obj) {
            return false;
        }
        if (obj.hasOwnProperty('excludeMethodNames')) {
            return true;
        }
        else if (obj.hasOwnProperty('includeMethodNames')) {
            return true;
        }
        else if (obj.hasOwnProperty('failIfMockNotProvided')) {
            return true;
        }
        return false;
    }
    TsJestMocker.isTsJestMockerConfig = isTsJestMockerConfig;
})(TsJestMocker = exports.TsJestMocker || (exports.TsJestMocker = {}));
