"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const functions_filter_1 = require("./functions-filter");
describe('FunctionsFilter', () => {
    let config = {};
    beforeEach(() => {
        config = {
            excludeMethodNames: new Set(['excludeProperty']),
            includeMethodNames: new Set(['includeProperty']),
            failIfMockNotProvided: false,
        };
    });
    it('should filter excluded properties', () => __awaiter(void 0, void 0, void 0, function* () {
        // GIVEN
        const property = 'excludeProperty';
        // WHEN
        const shouldFilter = functions_filter_1.FunctionsFilter.shouldFilter(property, config);
        // THEN
        expect(shouldFilter).toBeTruthy();
    }));
    it('should not filter excluded properties if the same property is in the include list', () => __awaiter(void 0, void 0, void 0, function* () {
        // GIVEN
        const property = 'includeProperty';
        config.excludeMethodNames.add('includeProperty'); // is in the "excluded" list, but the "includes" list has higher priority
        // WHEN
        const shouldFilter = functions_filter_1.FunctionsFilter.shouldFilter(property, config);
        // THEN
        expect(shouldFilter).toBeFalsy();
    }));
});
