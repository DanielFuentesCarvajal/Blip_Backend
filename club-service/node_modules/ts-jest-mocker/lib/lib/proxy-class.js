"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createClassProxy = void 0;
const functions_finder_1 = require("./functions-finder");
const functions_filter_1 = require("./functions-filter");
const config_1 = require("./config");
const defaultConfig = {
    excludeMethodNames: [],
    failIfMockNotProvided: true,
    includeMethodNames: [],
};
const createClassProxy = (clazz, mockConfig) => {
    const config = config_1.MergedConfig.merge(defaultConfig, mockConfig);
    const functions = functions_finder_1.FunctionsFinder.find(clazz);
    return new Proxy({}, {
        get: (target, property) => {
            if (property in target) {
                return target[property];
            }
            if (functions.has(property) && !functions_filter_1.FunctionsFilter.shouldFilter(property, config)) {
                target[property] = jest.fn();
                if (config.failIfMockNotProvided) {
                    target[property].mockImplementation(() => {
                        throw new Error(`Method '${String(property)}' is not mocked`);
                    });
                }
            }
            return target[property];
        },
    });
};
exports.createClassProxy = createClassProxy;
