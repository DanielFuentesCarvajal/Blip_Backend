"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const proxy_class_1 = require("./proxy-class");
class TestClass {
    method1() {
        return true;
    }
    method2() {
        return false;
    }
    method3() {
        return 'test';
    }
}
describe('proxy class', () => {
    it('should proxy all methods', () => __awaiter(void 0, void 0, void 0, function* () {
        // GIVEN
        const clazz = TestClass;
        // WHEN
        const proxy = (0, proxy_class_1.createClassProxy)(clazz);
        // THEN
        expect(proxy).toBeDefined();
        expect(proxy.method1).toBeDefined();
        expect(proxy.method2).toBeDefined();
        expect(proxy.method3).toBeDefined();
    }));
    it('should not proxy not existing methods', () => __awaiter(void 0, void 0, void 0, function* () {
        // GIVEN
        const clazz = TestClass;
        // WHEN
        const proxy = (0, proxy_class_1.createClassProxy)(clazz);
        // THEN
        expect(proxy).toBeDefined();
        expect(proxy.method4).toBeUndefined(); // unknown method should not be mocked
        expect(proxy.method5).toBeUndefined(); // unknown method should not be mocked
        expect(proxy.method6).toBeUndefined(); // unknown method should not be mocked
    }));
    it('should throw an error on methods whose implementation is not mocked explicitly', () => __awaiter(void 0, void 0, void 0, function* () {
        // GIVEN
        const clazz = TestClass;
        // WHEN
        const proxy = (0, proxy_class_1.createClassProxy)(clazz);
        // THEN
        expect(() => {
            proxy.method1();
        }).toThrowError(`Method 'method1' is not mocked`);
    }));
    it('should not throw an error on methods whose implementation is not mocked explicitly when failIfMockNotProvided=false', () => __awaiter(void 0, void 0, void 0, function* () {
        // GIVEN
        const clazz = TestClass;
        // WHEN
        const proxy = (0, proxy_class_1.createClassProxy)(clazz, {
            failIfMockNotProvided: false,
        });
        // THEN
        expect(() => {
            proxy.method1();
        }).not.toThrowError(`Method 'method1' is not mocked`);
        expect(proxy.method1()).toBeUndefined();
    }));
    it('should handle toEqual properly for same object', () => __awaiter(void 0, void 0, void 0, function* () {
        // GIVEN
        const clazz = TestClass;
        const testMock = (0, proxy_class_1.createClassProxy)(clazz);
        // WHEN
        // THEN
        expect(testMock).toEqual(testMock);
    }));
});
